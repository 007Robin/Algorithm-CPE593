//one path	O(V*E) space O(V)
BellmanFord(start, end)
	cost ← [ ∞, ∞, …]	array of V 
	cost[start] ← 0
	for v ← 0 to V-1
		for each edge e 
			if cost[v2] > cost[v] + adjacent[v2]
				cost[v2] ← cost[v] + adjacent[v2]
			end
		end
	end

//all shortest path O(V^3) space O(V^2)
Floyd-Warshall()
	dist ← |V| × |V| array of minimum distances initialized to ∞ (infinity)
	for each vertex v
	    dist[v][v] ← 0
	for each edge (u,v)
	    dist[u][v] ← w(u,v)  // the weight of the edge (u,v)
	for k from 1 to |V|
	   for i from 1 to |V|
		  for j from 1 to |V|
			if dist[i][j] > dist[i][k] + dist[k][j] 
			 	dist[i][j] ← dist[i][k] + dist[k][j]
		  	end if

//all shortest path with Path Reconstruction O(V^3)
Floyd-Warshall() 
	let dist ← |V| × |V| array of minimum distances initialized to ∞ (infinity)
	let next be a |V| × |V| array of vertex numbers to null

	for each vertex v
	    dist[v][v] ← 0   //O(V)
	for each edge (u,v)
	    dist[u][v] ← w(u,v)  // the weight of the edge (u,v)
		next[u][v] ← v
	for k from 1 to |V|
	   for i from 1 to |V|
		  for j from 1 to |V|
			if dist[i][j] > dist[i][k] + dist[k][j] 
			 	dist[i][j] ← dist[i][k] + dist[k][j]
				next[i][j] ← next[i][k]
		  	end if
procedure Path(u, v)
	if next[u][v] = null then	//mean no path from i to j
		return []
	path = [u]
	while u ≠ v
		u ← next[u][v]
		path.append(u)
	return path

	//if diagnal has negative number, it means it has negative weight cycle in the graph
